// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_data_2eproto;
namespace tdpkg {
class DataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataReq> _instance;
} _DataReq_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data> _instance;
} _Data_default_instance_;
class DataRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataResp> _instance;
} _DataResp_default_instance_;
}  // namespace tdpkg
static void InitDefaultsscc_info_Data_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tdpkg::_Data_default_instance_;
    new (ptr) ::tdpkg::Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tdpkg::Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Data_data_2eproto}, {}};

static void InitDefaultsscc_info_DataReq_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tdpkg::_DataReq_default_instance_;
    new (ptr) ::tdpkg::DataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tdpkg::DataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataReq_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataReq_data_2eproto}, {}};

static void InitDefaultsscc_info_DataResp_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tdpkg::_DataResp_default_instance_;
    new (ptr) ::tdpkg::DataResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tdpkg::DataResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataResp_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataResp_data_2eproto}, {
      &scc_info_Data_data_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataReq, ra_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataReq, rb_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataReq, rc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tdpkg::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tdpkg::Data, da_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::Data, db_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::Data, dc_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::Data, dd_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::Data, de_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataResp, rsa_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataResp, rsb_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataResp, rsc_),
  PROTOBUF_FIELD_OFFSET(::tdpkg::DataResp, datas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tdpkg::DataReq)},
  { 8, -1, sizeof(::tdpkg::Data)},
  { 18, -1, sizeof(::tdpkg::DataResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tdpkg::_DataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tdpkg::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tdpkg::_DataResp_default_instance_),
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\022\005tdpkg\"-\n\007DataReq\022\n\n\002ra\030\001 \001"
  "(\005\022\n\n\002rb\030\002 \001(\r\022\n\n\002rc\030\003 \001(\t\"B\n\004Data\022\n\n\002da"
  "\030\001 \001(\003\022\n\n\002db\030\002 \001(\004\022\n\n\002dc\030\003 \001(\005\022\n\n\002dd\030\004 \001"
  "(\r\022\n\n\002de\030\005 \001(\t\"M\n\010DataResp\022\013\n\003rsa\030\001 \001(\005\022"
  "\013\n\003rsb\030\002 \001(\r\022\013\n\003rsc\030\003 \001(\t\022\032\n\005datas\030\007 \003(\013"
  "2\013.tdpkg.Datab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_data_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_data_2eproto_sccs[3] = {
  &scc_info_Data_data_2eproto.base,
  &scc_info_DataReq_data_2eproto.base,
  &scc_info_DataResp_data_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_2eproto_once;
static bool descriptor_table_data_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto = {
  &descriptor_table_data_2eproto_initialized, descriptor_table_protodef_data_2eproto, "data.proto", 221,
  &descriptor_table_data_2eproto_once, descriptor_table_data_2eproto_sccs, descriptor_table_data_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_data_2eproto::offsets,
  file_level_metadata_data_2eproto, 3, file_level_enum_descriptors_data_2eproto, file_level_service_descriptors_data_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_data_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_data_2eproto), true);
namespace tdpkg {

// ===================================================================

void DataReq::InitAsDefaultInstance() {
}
class DataReq::_Internal {
 public:
};

DataReq::DataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tdpkg.DataReq)
}
DataReq::DataReq(const DataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rc().empty()) {
    rc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rc_);
  }
  ::memcpy(&ra_, &from.ra_,
    static_cast<size_t>(reinterpret_cast<char*>(&rb_) -
    reinterpret_cast<char*>(&ra_)) + sizeof(rb_));
  // @@protoc_insertion_point(copy_constructor:tdpkg.DataReq)
}

void DataReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataReq_data_2eproto.base);
  rc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ra_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_) -
      reinterpret_cast<char*>(&ra_)) + sizeof(rb_));
}

DataReq::~DataReq() {
  // @@protoc_insertion_point(destructor:tdpkg.DataReq)
  SharedDtor();
}

void DataReq::SharedDtor() {
  rc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataReq& DataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataReq_data_2eproto.base);
  return *internal_default_instance();
}


void DataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tdpkg.DataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ra_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_) -
      reinterpret_cast<char*>(&ra_)) + sizeof(rb_));
  _internal_metadata_.Clear();
}

const char* DataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ra = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdpkg.DataReq.rc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tdpkg.DataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ra = 1;
  if (this->ra() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ra(), target);
  }

  // uint32 rb = 2;
  if (this->rb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rb(), target);
  }

  // string rc = 3;
  if (this->rc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rc().data(), static_cast<int>(this->_internal_rc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdpkg.DataReq.rc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tdpkg.DataReq)
  return target;
}

size_t DataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tdpkg.DataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rc = 3;
  if (this->rc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rc());
  }

  // int32 ra = 1;
  if (this->ra() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ra());
  }

  // uint32 rb = 2;
  if (this->rb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tdpkg.DataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tdpkg.DataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tdpkg.DataReq)
    MergeFrom(*source);
  }
}

void DataReq::MergeFrom(const DataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tdpkg.DataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rc().size() > 0) {

    rc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rc_);
  }
  if (from.ra() != 0) {
    _internal_set_ra(from._internal_ra());
  }
  if (from.rb() != 0) {
    _internal_set_rb(from._internal_rb());
  }
}

void DataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tdpkg.DataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReq::CopyFrom(const DataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tdpkg.DataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReq::IsInitialized() const {
  return true;
}

void DataReq::InternalSwap(DataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rc_.Swap(&other->rc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ra_, other->ra_);
  swap(rb_, other->rb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data::InitAsDefaultInstance() {
}
class Data::_Internal {
 public:
};

Data::Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tdpkg.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  de_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_de().empty()) {
    de_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.de_);
  }
  ::memcpy(&da_, &from.da_,
    static_cast<size_t>(reinterpret_cast<char*>(&dd_) -
    reinterpret_cast<char*>(&da_)) + sizeof(dd_));
  // @@protoc_insertion_point(copy_constructor:tdpkg.Data)
}

void Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_data_2eproto.base);
  de_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&da_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dd_) -
      reinterpret_cast<char*>(&da_)) + sizeof(dd_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:tdpkg.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  de_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data& Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_data_2eproto.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:tdpkg.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  de_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&da_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dd_) -
      reinterpret_cast<char*>(&da_)) + sizeof(dd_));
  _internal_metadata_.Clear();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 da = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          da_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 db = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          db_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string de = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_de();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdpkg.Data.de"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tdpkg.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 da = 1;
  if (this->da() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_da(), target);
  }

  // uint64 db = 2;
  if (this->db() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_db(), target);
  }

  // int32 dc = 3;
  if (this->dc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dc(), target);
  }

  // uint32 dd = 4;
  if (this->dd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dd(), target);
  }

  // string de = 5;
  if (this->de().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_de().data(), static_cast<int>(this->_internal_de().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdpkg.Data.de");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_de(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tdpkg.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tdpkg.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string de = 5;
  if (this->de().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_de());
  }

  // int64 da = 1;
  if (this->da() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_da());
  }

  // uint64 db = 2;
  if (this->db() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_db());
  }

  // int32 dc = 3;
  if (this->dc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dc());
  }

  // uint32 dd = 4;
  if (this->dd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tdpkg.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tdpkg.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tdpkg.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tdpkg.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.de().size() > 0) {

    de_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.de_);
  }
  if (from.da() != 0) {
    _internal_set_da(from._internal_da());
  }
  if (from.db() != 0) {
    _internal_set_db(from._internal_db());
  }
  if (from.dc() != 0) {
    _internal_set_dc(from._internal_dc());
  }
  if (from.dd() != 0) {
    _internal_set_dd(from._internal_dd());
  }
}

void Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tdpkg.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tdpkg.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  de_.Swap(&other->de_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(da_, other->da_);
  swap(db_, other->db_);
  swap(dc_, other->dc_);
  swap(dd_, other->dd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataResp::InitAsDefaultInstance() {
}
class DataResp::_Internal {
 public:
};

DataResp::DataResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tdpkg.DataResp)
}
DataResp::DataResp(const DataResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsc().empty()) {
    rsc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsc_);
  }
  ::memcpy(&rsa_, &from.rsa_,
    static_cast<size_t>(reinterpret_cast<char*>(&rsb_) -
    reinterpret_cast<char*>(&rsa_)) + sizeof(rsb_));
  // @@protoc_insertion_point(copy_constructor:tdpkg.DataResp)
}

void DataResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataResp_data_2eproto.base);
  rsc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rsa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsb_) -
      reinterpret_cast<char*>(&rsa_)) + sizeof(rsb_));
}

DataResp::~DataResp() {
  // @@protoc_insertion_point(destructor:tdpkg.DataResp)
  SharedDtor();
}

void DataResp::SharedDtor() {
  rsc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataResp& DataResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataResp_data_2eproto.base);
  return *internal_default_instance();
}


void DataResp::Clear() {
// @@protoc_insertion_point(message_clear_start:tdpkg.DataResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  rsc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rsa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsb_) -
      reinterpret_cast<char*>(&rsa_)) + sizeof(rsb_));
  _internal_metadata_.Clear();
}

const char* DataResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rsa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rsa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rsb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rsc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rsc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tdpkg.DataResp.rsc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tdpkg.Data datas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tdpkg.DataResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rsa = 1;
  if (this->rsa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rsa(), target);
  }

  // uint32 rsb = 2;
  if (this->rsb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rsb(), target);
  }

  // string rsc = 3;
  if (this->rsc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rsc().data(), static_cast<int>(this->_internal_rsc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tdpkg.DataResp.rsc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rsc(), target);
  }

  // repeated .tdpkg.Data datas = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tdpkg.DataResp)
  return target;
}

size_t DataResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tdpkg.DataResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tdpkg.Data datas = 7;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string rsc = 3;
  if (this->rsc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rsc());
  }

  // int32 rsa = 1;
  if (this->rsa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rsa());
  }

  // uint32 rsb = 2;
  if (this->rsb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rsb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tdpkg.DataResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DataResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tdpkg.DataResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tdpkg.DataResp)
    MergeFrom(*source);
  }
}

void DataResp::MergeFrom(const DataResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tdpkg.DataResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
  if (from.rsc().size() > 0) {

    rsc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsc_);
  }
  if (from.rsa() != 0) {
    _internal_set_rsa(from._internal_rsa());
  }
  if (from.rsb() != 0) {
    _internal_set_rsb(from._internal_rsb());
  }
}

void DataResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tdpkg.DataResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResp::CopyFrom(const DataResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tdpkg.DataResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResp::IsInitialized() const {
  return true;
}

void DataResp::InternalSwap(DataResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datas_.InternalSwap(&other->datas_);
  rsc_.Swap(&other->rsc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rsa_, other->rsa_);
  swap(rsb_, other->rsb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tdpkg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tdpkg::DataReq* Arena::CreateMaybeMessage< ::tdpkg::DataReq >(Arena* arena) {
  return Arena::CreateInternal< ::tdpkg::DataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tdpkg::Data* Arena::CreateMaybeMessage< ::tdpkg::Data >(Arena* arena) {
  return Arena::CreateInternal< ::tdpkg::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::tdpkg::DataResp* Arena::CreateMaybeMessage< ::tdpkg::DataResp >(Arena* arena) {
  return Arena::CreateInternal< ::tdpkg::DataResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
